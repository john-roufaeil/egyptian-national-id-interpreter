{
	"info": {
		"_postman_id": "b91c519b-1d18-4aae-a750-ff2d3a9c32e2",
		"name": "National ID Validator",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38094579"
	},
	"item": [
		{
			"name": "Get API KEY",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.api_key).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Api key is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.api_key).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Api key should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000"
				}
			},
			"response": []
		},
		{
			"name": "Empty Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required content type - application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"National ID field exists in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('national_id');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "No API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('error');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response schema matches expected format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid API Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key .ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Misspelled national_id in Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('national_id');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nat_id\": \"abc\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: National ID not 14 digits",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Century Not Exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field - error\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"  pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"  });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"50202020202020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Future DOB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"32902290202020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Exceed month days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"32002300202020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Month not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"32013300202020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Day not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"32002990202020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid: Governorate not valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.error).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"32002010902020\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid national ID 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('year');\r",
							"    pm.expect(responseData).to.have.property('month');\r",
							"    pm.expect(responseData).to.have.property('day');\r",
							"    pm.expect(responseData).to.have.property('governorate');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('serial_number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Year is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.year).to.be.a('number').and.to.satisfy((year) => year >= 0, \"Year must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Month and day are in valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.month).to.match(/^\\d{1,2}$/);\r",
							"    pm.expect(responseData.day).to.match(/^\\d{1,2}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"29001311234567\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid national ID 2 - Leap year Feb 29th",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('year');\r",
							"    pm.expect(responseData).to.have.property('month');\r",
							"    pm.expect(responseData).to.have.property('day');\r",
							"    pm.expect(responseData).to.have.property('governorate');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('serial_number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Year is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.year).to.be.a('number').and.to.satisfy((year) => year >= 0, \"Year must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Month and day are in valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.month).to.match(/^\\d{1,2}$/);\r",
							"    pm.expect(responseData.day).to.match(/^\\d{1,2}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"30002298800217\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid national ID 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('year');\r",
							"    pm.expect(responseData).to.have.property('month');\r",
							"    pm.expect(responseData).to.have.property('day');\r",
							"    pm.expect(responseData).to.have.property('governorate');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('serial_number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Year is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.year).to.be.a('number').and.to.satisfy((year) => year >= 0, \"Year must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Month and day are in valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.month).to.match(/^\\d{1,2}$/);\r",
							"    pm.expect(responseData.day).to.match(/^\\d{1,2}$/);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Api-Key Ix9tPwTs.ijoqALJnB3qFQcWrwvaL8DN89VY0uaWp",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"national_id\": \"20001010101017\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/validate-national-id/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"validate-national-id",
						""
					]
				}
			},
			"response": []
		}
	]
}
